coords[i,2] = coords[i-1,2] + ystep
}
plot.new() # New plot frame with no axes
par(mar=c(0,0,0,0)) # Minimize margins
# Make a square plot window with no box outlining it
plot.window(c(-Rmax,Rmax), c(-Rmax,Rmax), asp=1,bty="n")
# Draw a polygon with 50 sides, approximating a circle
polygon(Rmax*cos(2*pi*(0:50/50)), Rmax*sin(2*pi*(0:50/50)))
# Plot (x,y) of the particle path
lines(coords[,1],coords[,2])
s_seed <- 233
Rmax = 10 # radius of boundary
N = 2000 # number of steps
set.seed(s_seed)
coords = matrix(nrow=N+1,ncol=2) # x and y coordinates
coords[1,1] = coords[1,2] = 0 # start at origin
twopi = 2*pi
for (i in 2:(N+1)) {
Rtest = 1.1*Rmax
while (Rtest > Rmax) {
xold = coords[i-1,1]
yold = coords[i-1,2]
theta = runif(1,0,twopi) # Random angle for next step
xstep = cos(theta) # x and y coords of next step
ystep = sin(theta)
xnew = xold + xstep # New trial x and y coords
ynew = yold + ystep
R = sqrt(xnew^2 + ynew^2) # New distance from origin
# If inside Rmax, reset Rtest to exit while loop
if (R < Rmax) Rtest = R
}
coords[i,1] = coords[i-1,1] + xstep # New x, y coords
coords[i,2] = coords[i-1,2] + ystep
}
plot.new() # New plot frame with no axes
par(mar=c(0,0,0,0)) # Minimize margins
# Make a square plot window with no box outlining it
plot.window(c(-Rmax,Rmax), c(-Rmax,Rmax), asp=1,bty="n")
# Draw a polygon with 50 sides, approximating a circle
polygon(Rmax*cos(2*pi*(0:50/50)), Rmax*sin(2*pi*(0:50/50)))
# Plot (x,y) of the particle path
lines(coords[,1],coords[,2])
s_seed <- 23
Rmax = 10 # radius of boundary
N = 2000 # number of steps
set.seed(s_seed)
coords = matrix(nrow=N+1,ncol=2) # x and y coordinates
coords[1,1] = coords[1,2] = 0 # start at origin
twopi = 2*pi
for (i in 2:(N+1)) {
Rtest = 1.1*Rmax
while (Rtest > Rmax) {
xold = coords[i-1,1]
yold = coords[i-1,2]
theta = runif(1,0,twopi) # Random angle for next step
xstep = cos(theta) # x and y coords of next step
ystep = sin(theta)
xnew = xold + xstep # New trial x and y coords
ynew = yold + ystep
R = sqrt(xnew^2 + ynew^2) # New distance from origin
# If inside Rmax, reset Rtest to exit while loop
if (R < Rmax) Rtest = R
}
coords[i,1] = coords[i-1,1] + xstep # New x, y coords
coords[i,2] = coords[i-1,2] + ystep
}
plot.new() # New plot frame with no axes
par(mar=c(0,0,0,0)) # Minimize margins
# Make a square plot window with no box outlining it
plot.window(c(-Rmax,Rmax), c(-Rmax,Rmax), asp=1,bty="n")
# Draw a polygon with 50 sides, approximating a circle
polygon(Rmax*cos(2*pi*(0:50/50)), Rmax*sin(2*pi*(0:50/50)))
# Plot (x,y) of the particle path
lines(coords[,1],coords[,2])
s_seed <- 23
Rmax = 100 # radius of boundary
N = 2000 # number of steps
set.seed(s_seed)
coords = matrix(nrow=N+1,ncol=2) # x and y coordinates
coords[1,1] = coords[1,2] = 0 # start at origin
twopi = 2*pi
for (i in 2:(N+1)) {
Rtest = 1.1*Rmax
while (Rtest > Rmax) {
xold = coords[i-1,1]
yold = coords[i-1,2]
theta = runif(1,0,twopi) # Random angle for next step
xstep = cos(theta) # x and y coords of next step
ystep = sin(theta)
xnew = xold + xstep # New trial x and y coords
ynew = yold + ystep
R = sqrt(xnew^2 + ynew^2) # New distance from origin
# If inside Rmax, reset Rtest to exit while loop
if (R < Rmax) Rtest = R
}
coords[i,1] = coords[i-1,1] + xstep # New x, y coords
coords[i,2] = coords[i-1,2] + ystep
}
plot.new() # New plot frame with no axes
par(mar=c(0,0,0,0)) # Minimize margins
# Make a square plot window with no box outlining it
plot.window(c(-Rmax,Rmax), c(-Rmax,Rmax), asp=1,bty="n")
# Draw a polygon with 50 sides, approximating a circle
polygon(Rmax*cos(2*pi*(0:50/50)), Rmax*sin(2*pi*(0:50/50)))
# Plot (x,y) of the particle path
lines(coords[,1],coords[,2])
s_seed <- 23
Rmax = 100 # radius of boundary
N = 20000 # number of steps
set.seed(s_seed)
coords = matrix(nrow=N+1,ncol=2) # x and y coordinates
coords[1,1] = coords[1,2] = 0 # start at origin
twopi = 2*pi
for (i in 2:(N+1)) {
Rtest = 1.1*Rmax
while (Rtest > Rmax) {
xold = coords[i-1,1]
yold = coords[i-1,2]
theta = runif(1,0,twopi) # Random angle for next step
xstep = cos(theta) # x and y coords of next step
ystep = sin(theta)
xnew = xold + xstep # New trial x and y coords
ynew = yold + ystep
R = sqrt(xnew^2 + ynew^2) # New distance from origin
# If inside Rmax, reset Rtest to exit while loop
if (R < Rmax) Rtest = R
}
coords[i,1] = coords[i-1,1] + xstep # New x, y coords
coords[i,2] = coords[i-1,2] + ystep
}
plot.new() # New plot frame with no axes
par(mar=c(0,0,0,0)) # Minimize margins
# Make a square plot window with no box outlining it
plot.window(c(-Rmax,Rmax), c(-Rmax,Rmax), asp=1,bty="n")
# Draw a polygon with 50 sides, approximating a circle
polygon(Rmax*cos(2*pi*(0:50/50)), Rmax*sin(2*pi*(0:50/50)))
# Plot (x,y) of the particle path
lines(coords[,1],coords[,2])
s_seed <- 23
Rmax = 100 # radius of boundary
N = 20000 # number of steps
set.seed(s_seed)
coords = matrix(nrow=N+1,ncol=2) # x and y coordinates
coords[1,1] = coords[1,2] = 0 # start at origin
twopi = 2*pi
for (i in 2:(N+1)) {
Rtest = 1.1*Rmax
while (Rtest > Rmax) {
xold = coords[i-1,1]
yold = coords[i-1,2]
theta = runif(1,0,twopi) # Random angle for next step
xstep = cos(theta) # x and y coords of next step
ystep = sin(theta)
xnew = xold + xstep # New trial x and y coords
ynew = yold + ystep
R = sqrt(xnew^2 + ynew^2) # New distance from origin
# If inside Rmax, reset Rtest to exit while loop
if (R < Rmax) Rtest = R
}
coords[i,1] = coords[i-1,1] + xstep # New x, y coords
coords[i,2] = coords[i-1,2] + ystep
}
plot.new() # New plot frame with no axes
par(mar=c(0,0,0,0)) # Minimize margins
# Make a square plot window with no box outlining it
plot.window(c(-Rmax,Rmax), c(-Rmax,Rmax), asp=1,bty="n")
# Draw a polygon with 50 sides, approximating a circle
polygon(Rmax*cos(2*pi*(0:50/50)), Rmax*sin(2*pi*(0:50/50)))
# Plot (x,y) of the particle path
lines(coords[,1],coords[,2], col="red")
theta = runif(1,0,twopi)
theta
s_seed <- 23
amax = 10 # radius of boundary
N = 20000 # number of steps
set.seed(s_seed)
coords = matrix(nrow=N+1,ncol=2) # x and y coordinates
coords[1,1] = coords[1,2] = 0 # start at origin
twopi = 2*pi
for (i in 2:(N+1)) {
xtest = 1.1*amax
ytest = 1.1*amax
while (xtest > amax ) {
xold = coords[i-1,1]
yold = coords[i-1,2]
theta = runif(1,0,twopi) # Random angle for next step
xstep = cos(theta) # x and y coords of next step
ystep = sin(theta)
xnew = xold + xstep # New trial x and y coords
ynew = yold + ystep
# If inside amax, reset Rtest to exit while loop
if (abs(xnew) < amax) xtest = abs(xnew)
if (abs(ynew) < amax) ytest = abs(ynew)
}
coords[i,1] = coords[i-1,1] + xstep # New x, y coords
coords[i,2] = coords[i-1,2] + ystep
}
plot.new() # New plot frame with no axes
par(mar=c(0,0,0,0)) # Minimize margins
# Make a square plot window with no box outlining it
plot.window(c(-Rmax,Rmax), c(-Rmax,Rmax), asp=1,bty="n")
# Draw a polygon with 50 sides, approximating a circle
polygon(Rmax*cos(2*pi*(0:50/50)), Rmax*sin(2*pi*(0:50/50)))
# Plot (x,y) of the particle path
lines(coords[,1],coords[,2], col="red")
plot.new() # New plot frame with no axes
par(mar=c(0,0,0,0)) # Minimize margins
# Make a square plot window with no box outlining it
plot.window(c(-amax,amax), c(-amax,amax), asp=1,bty="n")
# Draw a polygon with 50 sides, approximating a circle
?box
s_seed <- 23
amax = 10 # radius of boundary
N = 20000 # number of steps
set.seed(s_seed)
coords = matrix(nrow=N+1,ncol=2) # x and y coordinates
coords[1,1] = coords[1,2] = 0 # start at origin
twopi = 2*pi
for (i in 2:(N+1)) {
xtest = 1.1*amax
ytest = 1.1*amax
while (xtest > amax || ytest < ymax ) {
xold = coords[i-1,1]
yold = coords[i-1,2]
theta = runif(1,0,twopi) # Random angle for next step
xstep = cos(theta) # x and y coords of next step
ystep = sin(theta)
xnew = xold + xstep # New trial x and y coords
ynew = yold + ystep
# If inside amax, reset Rtest to exit while loop
if (abs(xnew) < amax) xtest = abs(xnew)
if (abs(ynew) < amax) ytest = abs(ynew)
}
coords[i,1] = coords[i-1,1] + xstep # New x, y coords
coords[i,2] = coords[i-1,2] + ystep
}
plot.new() # New plot frame with no axes
par(mar=c(0,0,0,0)) # Minimize margins
# Make a square plot window with no box outlining it
plot.window(c(-amax,amax), c(-amax,amax), asp=1,bty="n")
# Draw a polygon with 50 sides, approximating a circle
polygon(Rmax*cos(2*pi*(0:50/50)), Rmax*sin(2*pi*(0:50/50)))
# Plot (x,y) of the particle path
lines(coords[,1],coords[,2], col="red")
plot.new() # New plot frame with no axes
par(mar=c(0,0,0,0)) # Minimize margins
# Make a square plot window with no box outlining it
plot.window(c(-amax,amax), c(-amax,amax), asp=1,bty="n")
# Draw a polygon with 50 sides, approximating a circle
polygon(Rmax*cos(2*pi*(0:50/50)), Rmax*sin(2*pi*(0:50/50)))
# Plot (x,y) of the particle path
lines(coords[,1],coords[,2], col="red")
s_seed <- 23
amax = 10 # radius of boundary
N = 20000 # number of steps
set.seed(s_seed)
coords = matrix(nrow=N+1,ncol=2) # x and y coordinates
coords[1,1] = coords[1,2] = 0 # start at origin
twopi = 2*pi
for (i in 2:(N+1)) {
xtest = 1.1*amax
ytest = 1.1*amax
while (xtest > amax || ytest < amax ) {
xold = coords[i-1,1]
yold = coords[i-1,2]
theta = runif(1,0,twopi) # Random angle for next step
xstep = cos(theta) # x and y coords of next step
ystep = sin(theta)
xnew = xold + xstep # New trial x and y coords
ynew = yold + ystep
# If inside amax, reset Rtest to exit while loop
if (abs(xnew) < amax) xtest = abs(xnew)
if (abs(ynew) < amax) ytest = abs(ynew)
}
coords[i,1] = coords[i-1,1] + xstep # New x, y coords
coords[i,2] = coords[i-1,2] + ystep
}
s_seed <- 23
amax = 10 # radius of boundary
N = 200 # number of steps
set.seed(s_seed)
coords = matrix(nrow=N+1,ncol=2) # x and y coordinates
coords[1,1] = coords[1,2] = 0 # start at origin
twopi = 2*pi
for (i in 2:(N+1)) {
xtest = 1.1*amax
ytest = 1.1*amax
while (xtest > amax ) {
xold = coords[i-1,1]
theta = runif(1,0,twopi) # Random angle for next step
xstep = cos(theta) # x and y coords of next step
xnew = xold + xstep # New trial x and y coords
# If inside amax, reset Rtest to exit while loop
if (abs(xnew) < amax) xtest = abs(xnew)
}
while ( ytest < amax ) {
yold = coords[i-1,2]
theta = runif(1,0,twopi) # Random angle for next step
ystep = sin(theta)
ynew = yold + ystep
# If inside amax, reset Rtest to exit while loop
if (abs(ynew) < amax) ytest = abs(ynew)
}
coords[i,1] = coords[i-1,1] + xstep # New x, y coords
coords[i,2] = coords[i-1,2] + ystep
}
plot.new() # New plot frame with no axes
par(mar=c(0,0,0,0)) # Minimize margins
# Make a square plot window with no box outlining it
plot.window(c(-amax,amax), c(-amax,amax), asp=1,bty="n")
# Draw a polygon with 50 sides, approximating a circle
polygon(Rmax*cos(2*pi*(0:50/50)), Rmax*sin(2*pi*(0:50/50)))
# Plot (x,y) of the particle path
lines(coords[,1],coords[,2], col="red")
?plot.window
coords
s_seed <- 23
amax = 10 # radius of boundary
N = 200 # number of steps
set.seed(s_seed)
coords = matrix(nrow=N+1,ncol=2) # x and y coordinates
coords[1,1] = coords[1,2] = 0 # start at origin
twopi = 2*pi
for (i in 2:(N+1)) {
xtest = 1.1*amax
ytest = 1.1*amax
while (xtest > amax ) {
xold = coords[i-1,1]
theta = runif(1,0,twopi) # Random angle for next step
xstep = cos(theta) # x and y coords of next step
xnew = xold + xstep # New trial x and y coords
# If inside amax, reset Rtest to exit while loop
if (abs(xnew) < amax) xtest = abs(xnew)
while ( ytest < amax ) {
yold = coords[i-1,2]
theta = runif(1,0,twopi) # Random angle for next step
ystep = sin(theta)
ynew = yold + ystep
# If inside amax, reset Rtest to exit while loop
if (abs(ynew) < amax) ytest = abs(ynew)
}
}
coords[i,1] = coords[i-1,1] + xstep # New x, y coords
coords[i,2] = coords[i-1,2] + ystep
}
plot.new() # New plot frame with no axes
par(mar=c(0,0,0,0)) # Minimize margins
# Make a square plot window with no box outlining it
plot.window(c(-amax,amax), c(-amax,amax), asp=1,bty="n")
# Draw a polygon with 50 sides, approximating a circle
polygon(Rmax*cos(2*pi*(0:50/50)), amax*sin(2*pi*(0:50/50)))
# Plot (x,y) of the particle path
lines(coords[,1],coords[,2], col="red")
coords
s_seed <- 23
amax = 10 # radius of boundary
N = 200 # number of steps
set.seed(s_seed)
coords = matrix(nrow=N+1,ncol=2) # x and y coordinates
coords[1,1] = coords[1,2] = 0 # start at origin
twopi = 2*pi
for (i in 2:(N+1)) {
xtest = 1.1*amax
ytest = 1.1*amax
while (xtest > amax ) {
xold = coords[i-1,1]
theta = runif(1,0,twopi) # Random angle for next step
xstep = cos(theta) # x and y coords of next step
xnew = xold + xstep # New trial x and y coords
# If inside amax, reset Rtest to exit while loop
if (abs(xnew) < amax) xtest = abs(xnew)
while ( ytest > amax ) {
yold = coords[i-1,2]
theta = runif(1,0,twopi) # Random angle for next step
ystep = sin(theta)
ynew = yold + ystep
# If inside amax, reset Rtest to exit while loop
if (abs(ynew) < amax) ytest = abs(ynew)
}
}
coords[i,1] = coords[i-1,1] + xstep # New x, y coords
coords[i,2] = coords[i-1,2] + ystep
}
plot.new() # New plot frame with no axes
par(mar=c(0,0,0,0)) # Minimize margins
# Make a square plot window with no box outlining it
plot.window(c(-amax,amax), c(-amax,amax), asp=1,bty="n")
# Draw a polygon with 50 sides, approximating a circle
polygon(Rmax*cos(2*pi*(0:50/50)), amax*sin(2*pi*(0:50/50)))
# Plot (x,y) of the particle path
lines(coords[,1],coords[,2], col="red")
?box
?plot.box
?plotbox
?box
?plot
plot(c(-amax,amax), c(-amax,amax) )
lines(c(-amax,amax), c(-amax,amax) )
box(c(-amax,amax), c(-amax,amax) )
plot.window(c(-amax,amax), c(-amax,amax), asp=1)
plot.new() # New plot frame with no axes
par(mar=c(0,0,0,0)) # Minimize margins
# Make a square plot window with no box outlining it
plot.window(c(-amax,amax), c(-amax,amax), asp=1,bty="n")
# Draw a polygon with 50 sides, approximating a circle
polygon(Rmax*cos(2*pi*(0:50/50)), amax*sin(2*pi*(0:50/50)))
lines(c(-amax,amax), c(-amax,amax) )
# Plot (x,y) of the particle path
lines(coords[,1],coords[,2], col="red")
plot.new() # New plot frame with no axes
par(mar=c(0,0,0,0)) # Minimize margins
# Make a square plot window with no box outlining it
plot.window(c(-amax,amax), c(-amax,amax), asp=1,bty="n")
lines(c(-amax,amax), c(-amax,amax) )
# Plot (x,y) of the particle path
lines(coords[,1],coords[,2], col="red")
setwd("C:/Users/FrancBracun/Documents/Moji programi/r/Data Science Specialization/Developing Data Products/Project/My project")
library(shiny)
library(shinyapps)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("C:/Users/FrancBracun/Documents/Moji programi/r/Data Science Specialization/Developing Data Products/Project/My project")
library(shinyapps)
deployApp(appName = "LinearRegression")
